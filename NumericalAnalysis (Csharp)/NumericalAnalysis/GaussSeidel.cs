using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace NumericalAnalysis {     class GaussSeidel     {         static double NORMINF(double[] A)         {             int n = A.Length;             double max = A[0];             for (int i = 1; i < n; i++)             {                 if (Math.Abs(max) < Math.Abs(A[i]))                     max = A[i];             }             return max;         }         static bool Check(double[,] A)         {             int n = (int)Math.Sqrt(A.Length);             //check diagonally-dominance             for (int i = 0; i < n; i++)             {                 double Sum = 0;                  for (int j = 0; j < n; j++)                 {                     if (i != j)                         Sum += Math.Abs(A[i, j]);                 }                  if (Math.Abs(A[i, i]) <= Sum)                     return false;             }             return true;         }         static void GaussSeldel(double[,] A, double[] B)         {             int n = B.Length;             double Lambda;             double[] X = new double[n];             double[] X_OLD = new double[n];             double[] Y = new double[n];             double[,] Alpha = new double[n, n];             for (int i = 0; i < n; i++)             {                 for (int j = 0; j < n; j++)                 {                     if (i != j) Alpha[i, j] = -A[i, j] / A[i, i];                     if (i == j) Alpha[i, j] = 0;                 }             }             for (int i = 0; i < n; i++)             {                 double Sum1 = 0,                        Sum2 = 0;                  for (int j = i; j < n; j++)                     Sum1 += Math.Abs(Alpha[i, j]);                  for (int j = 0; j < i; j++)                     Sum2 += Math.Abs(Alpha[i, j]);                  Y[i] = Sum1 / (1 - Sum2); //cthuc 20 trang 71             }             Lambda = NORMINF(Y);             for (int i = 0; i < n; i++)             {                 for (int j = 0; j < n; j++)                     Console.Write("{0}\t ", Math.Round(Alpha[i, j], 3));                 Console.WriteLine();             }             Console.WriteLine("Lambda = " + Lambda);             Console.Write("Number of Loop: ");             int ite = Convert.ToInt32(Console.ReadLine());              Console.WriteLine("\nNo.0");             for (int i = 0; i < n; i++)             {                 X[i] = B[i] / A[i, i];                 Console.Write("x{0}= {1}\t", i + 1, X[i]);             }             Console.WriteLine();             for (int k = 1; k <= ite; k++)             {                 double Err;                 Console.WriteLine("\nNo.{0}", k);                 for (int i = 0; i < n; i++)                 {                     double Sum = 0;                     for (int j = 0; j < n; j++)                         if (i != j)                             Sum += A[i, j] * X[j];                      X_OLD[i] = X[i];                      X[i] = (B[i] - Sum) / A[i, i];                      Y[i] = X[i] - X_OLD[i];                      Console.Write("x{0}= {1}\t", i + 1, X[i]);                 }                 Console.WriteLine("\n||X({0}) - X({1})|| = {2}", k, k - 1, Math.Abs(NORMINF(Y)));                 Err = Lambda / (1 - Lambda) * Math.Abs(NORMINF(Y));                 Console.WriteLine("||X({0}) - X*|| <= {1}", k, Err);             }         }         public void main()         {             //double[,] A = {             //       {4, 0.24, -0.08},             //       {0.09, 3, -0.15},             //       {0.04, -0.08, 4},             //       };             //double[] B = {8,9,20};             //if (Check(A)) GaussSeldel(A, B);             //else Console.WriteLine("Hệ phương tình không có dạng đường chéo trội");             double[,] A = {                     { 4, 0.24, -0.08},                     { 0.09, 3, -0.15},                     { 0.04, -0.08, 4},                    };             double[] B = { 8, 9, 20};             GaussSeldel(A, B);         }     } } 